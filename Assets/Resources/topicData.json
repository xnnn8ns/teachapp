[
    {
        "id": 1,
        "number": 1,
        "chapter_name": "Основы синтаксиса",
        "name": "Переменные и данные",
        "description": "<color=#ffff00ff><b><size=55>Переменные</size></b></color> - это такие контейнеры, в которых могут храниться различные данные. \r\n\r\nНазвания переменных могут состоять только из <color=#ffff00ff><b>латинские букв, цифр и символа нижнего подчёркивания.</b></color> \r\nИмя переменной <color=#ffff00ff><b>нельзя</b></color> начинать с цифры. \r\n\r\nТакже язык чувствителен <color=#ffff00ff><b>к регистру</b></color>, переменные  <color=#add8e6ff><b><size=55>Tom</size></b></color> и <color=#add8e6ff><b><size=55>tom</size></b></color> - это разные переменные.\r\n\r\nИ кроме того, название переменной не должно совпадать с ключевыми словами языка.\r\n\r\n<color=#ffff00ff><b><size=55>Ключевые слова:</size></b></color>\r\nfalse, true, none, else, if, import,pass, class,return,def,and,or,yield\r\n\r\n<color=#ffff00ff><b><size=55>Пример:</size></b></color>\r\nПравильно названные переменные выглядят вот так:\r\n<color=#add8e6ff><b>_Pole, N1ame, mas</b></color>",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "Variables and data",
        "description_eng": "<color=#ffff00ff><b><size=55>Variables</size></b></color> are containers in which various data can be stored. \r\n\r\nVariable names can only consist of <color=#ffff00ff><b>latin letters, numbers, and underscores.</b></color> \r\nThe name of the variable <color=#ffff00ff><b>cannot</b></color> start with a digit. \r\n\r\nThe language is also <color=#ffff00ff><b>case sensitive</b></color>,  the variables  <color=#add8e6ff><b><size=55>Tom</size></b></color> and <color=#add8e6ff><b><size=55>tom</size></b></color> are different variables.\r\n\r\nAnd besides, the name of the variable should not match the keywords of the language..\r\n\r\n<color=#ffff00ff><b><size=55>Keywords:</size></b></color>\r\nfalse, true, none, else, if, import,pass, class,return,def,and,or,yield\r\n\r\n<color=#ffff00ff><b><size=55>Example:</size></b></color>\r\nCorrectly named variables look like this:\r\n<color=#add8e6ff><b>_Pole, N1ame, mas</b></color>"
    },
    {
        "id": 4,
        "number": 2,
        "chapter_name": "Основы синтаксиса",
        "name": "Типы данных",
        "description": "<color=#ffff00ff><b><size=55>Типы данных</size></b></color> нужны для того, чтоб определить, какую именно информацию можно хранить в контейнере.\r\nДля чисел, текста и других вещей используются разные типы данных.\r\n\r\nДля <color=#add8e6ff><b><size=55>целых чисел</size></b></color> используется тип данных <color=#ffff00ff><b><size=55>int</size></b></color> (165). \r\nДля <color=#add8e6ff><b><size=55>чисел с плавающей точкой</size></b></color> тип данных <color=#ffff00ff><b><size=55>float</size></b></color> (187.756).\r\nДля <color=#add8e6ff><b><size=55>текста</size></b></color> тип данных <color=#ffff00ff><b><size=55>str</size></b></color> (\"Молоко\").\r\nДля <color=#add8e6ff><b><size=55>коллекции элементов</size></b></color> тип данных <color=#ffff00ff><b><size=55>list</size></b></color> ([\"яблоко\", \"груша\", \"апельсин\"] )\r\n\r\nЕсли представить, что переменные это закрытые коробки с вещами, то тип данных это как стикеры на коробках, которые говорят, что там находится.  \r\n\r\n<color=#ffff00ff><b><size=55>Пример:</size></b></color>\r\n<color=#add8e6ff><b>int x=14</b></color>\r\n<color=#add8e6ff><b>str a</b></color>",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "Data types",
        "description_eng": "<color=#ffff00ff><b><size=55>Data types</size></b></color> are needed in order to determine exactly what information can be stored in the container.\r\nDifferent data types are used for numbers, text, and others.\r\n\r\nFor <color=#add8e6ff><b><size=55>integers</size></b></color> the data type is <color=#ffff00ff><b><size=55>int</size></b></color> (165).\r\n\r\nFor <color=#add8e6ff><b><size=55>floating point numbers</size></b></color> the data type is <color=#ffff00ff><b><size=55>float</size></b></color> (187.756).\r\n\r\nFor <color=#add8e6ff><b><size=55>text</size></b></color> the data type is  <color=#ffff00ff><b><size=55>str</size></b></color> (\"Milk\").\r\n\r\nFor <color=#add8e6ff><b><size=55>collection of items</size></b></color> the data type is <color=#ffff00ff><b><size=55>list</size></b></color> ([\"apple\", \"pear\", \"orange\"] )\r\n\r\nIf imagine that variables are closed boxes with things, then the data type is like stickers on the boxes that say what is there. \r\n\r\n<color=#ffff00ff><b><size=55>Example:</size></b></color>\r\n<color=#add8e6ff><b>int x=14</b></color>\r\n<color=#add8e6ff><b>str a</b></color>"
    },
    {
        "id": 2,
        "number": 3,
        "chapter_name": "Основы синтаксиса",
        "name": "Арифметические операторы",
        "description": "К <color=#ffff00ff><b><size=55>арифметическим операторам</size></b></color> относятся: <color=#add8e6ff><b>сложение (+), вычитание (-), умножение (*), деление (/) </b></color> .\r\n\r\n<color=#ffff00ff><b><size=55>Пример:</size></b></color>\r\n<color=#add8e6ff><b>сложение= 7+3</b></color> \r\nзначение переменной результат будет равно 10\r\n\r\n<color=#add8e6ff><b>вычитание= 8-6</b></color> \r\nзначение переменной вычитание будет равно 2\r\n\r\n<color=#add8e6ff><b>умножение = 4*2</b></color> \r\nзначение переменной умножение  будет равно 8\r\n\r\n<color=#add8e6ff><b>деление = 9/3</b></color> \r\nзначение переменной деление  будет равно 3\r\n\r\nДля деления нужно помнить, что тип данных переменной, в которую записывается результат деления, должен быть \r\n<color=#ffff00ff><b><size=55>тип данных</size></b></color> <color=#add8e6ff><b>float</b></color> (число с плавающей точкой).",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "Arithmetic operators",
        "description_eng": "<color=#ffff00ff><b><size=55>Arithmetic operators</size></b></color> include: <color=#add8e6ff><b>addition (+), subtraction (-), multiplication (*), division (/)</b></color>.\r\n\r\n<color=#ffff00ff><b><size=55>Example:</size></b></color>\r\n<color=#add8e6ff><b>addition= 7+3</b></color> \r\nthe value of the result variable will be 10\r\n\r\n<color=#add8e6ff><b>subtraction= 8-6</b></color> \r\nthe value of the variable subtraction will be 2\r\n\r\n<color=#add8e6ff><b>multiplication = 4*2</b></color> \r\nthe value of the variable multiplication will be 8\r\n\r\n<color=#add8e6ff><b>division = 9/3</b></color> \r\nthe value of the variable division will be 3\r\n\r\nFor division, it must be remembered that the data type of the variable into which the result of division is written must be\r\n<color=#ffff00ff><b><size=55>data type</size></b></color> <color=#add8e6ff><b>float</b></color> (floating point number)."
    },
    {
        "id": 3,
        "number": 4,
        "chapter_name": "Основы синтаксиса",
        "name": "Операторы сравнения",
        "description": "Иногда есть <b><color=#ffff00ff><size=55>необходимость в программе сравнения</size></color></b> одного с другим, чтоб понять, что дальше будет делать программ или какую переменную брать.\r\n\r\n<b><color=#ffff00ff><size=55>Условные выражения делятся на</size></color></b><b><color=#add8e6ff> операторы сравнения и логические операторы.</color></b>\r\n\r\nОператоры сравнения <b><color=#add8e6ff>всегда возвращают значения True или False</color></b>\r\n\r\n<b><color=#ffff00ff><size=55>Операторы сравнения:</size></color></b>\r\n<b><color=#add8e6ff>==</color></b> Возвращает True, если оба операнда равны. Иначе возвращает False.\r\n<b><color=#add8e6ff>!=</color></b> Возвращает True, если оба операнда НЕ равны. Иначе возвращает False.\r\n<b><color=#add8e6ff>> (больше чем)</color></b> Возвращает True, если первый операнд больше второго.\r\n<b><color=#add8e6ff>< (меньше чем)</color></b> Возвращает True, если первый операнд меньше второго.\r\n<b><color=#add8e6ff>>= (больше или равно)</color></b> Возвращает True, если первый операнд больше или равен второму.\r\n<b><color=#add8e6ff><= (меньше или равно)</color></b> Возвращает True, если первый операнд меньше или равен второму.\r\n\r\n<b><color=#ffff00ff><size=55>Пример:</size></color></b>\r\na = 3\r\nb = 7\r\nres = a == b <b><color=#add8e6ff> # сохраняем результат операции в переменную </color></b>\r\nprint(res) <b><color=#add8e6ff> # False - 4 не равно 5 </color></b>\r\nprint(a != b) <b><color=#add8e6ff> # True</color></b>",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "Comparison Operators",
        "description_eng": "Sometimes there is a <b><color=#ffff00ff><size=55>need in the program for comparison</size></color></b> of one with another, to understand what the program will do next or which variable to take.\r\n\r\n<b><color=#ffff00ff><size=55>Conditional expressions are divided into</size></color></b><b><color=#add8e6ff> comparison operators and logical operators.</color></b>\r\n\r\nComparison operators <b><color=#add8e6ff>always return True or False values</color></b>\r\n\r\n<b><color=#ffff00ff><size=55>Comparison operators:</size></color></b>\r\n<b><color=#add8e6ff>==</color></b> Returns True if both operands are equal. Otherwise, it returns False.\r\n<b><color=#add8e6ff>!=</color></b> Returns True if both operands are NOT equal. Otherwise, it returns False.\r\n<b><color=#add8e6ff>> (more than)</color></b> Returns True if the first operand is greater than the second.\r\n<b><color=#add8e6ff>< (less than)</color></b> Returns True if the first operand is less than the second.\r\n<b><color=#add8e6ff>>= (greater than or equal to)</color></b> Returns True if the first operand is greater than or equal to the second.\r\n<b><color=#add8e6ff><= (less than or equal to)</color></b> Returns True if the first operand is less than or equal to the second.\r\n\r\n<b><color=#ffff00ff><size=55>Example:</size></color></b>\r\na = 3\r\nb = 7\r\nres = a == b <b><color=#add8e6ff> # save the result of the operation in a variable </color></b>\r\nprint(res) <b><color=#add8e6ff> # False - 4 is not equal to 5 </color></b>\r\nprint(a != b) <b><color=#add8e6ff> # True</color></b>"
    },
    {
        "id": 5,
        "number": 5,
        "chapter_name": "Основы синтаксиса",
        "name": "Логические операторы",
        "description": "<color=#ffff00ff><b><size=55>В Python имеются следующие логические операторы:</size></b></color>\r\n<color=#add8e6ff><b>and</b></color>(логическое умножение),<color=#add8e6ff><b>or</b></color>(логическое сложение),<color=#add8e6ff><b>not</b></color>(логическое отрицание).\r\n\r\n<color=#add8e6ff><b>and(и)</b></color>:\r\nЭтот оператор возвращает значение <b>TRUE</b> только если все переменные имеют значение <b>TRUE</b>. \r\nЕсли хотя бы одна из переменных будет <b>FALSE</b> , то и значение будет <b>FALSE</b>.\r\n\r\n<color=#ffff00ff><b><size=55>Пример:</size></b></color>\r\nage = 23\r\nweight = 50\r\nresult = age > 21 and weight == 50\r\nprint(result) <color=#add8e6ff><b> # True</b></color>\r\n\r\nВ данном случае оператор <color=#add8e6ff><b>and</b></color> сравнивает результаты двух выражений: <color=#add8e6ff><b>age > 21</b></color> <color=#add8e6ff><b>weight == 50</b></color>. И если оба этих выражений возвращают <b>True</b>,\r\nто оператор <color=#add8e6ff><b>and</b></color> также возвращает <b>True</b> (формально возвращается значение последнего операнда).\r\n\r\n<color=#add8e6ff><b>or(или)</b></color>:\r\nЭтот оператор возвращает значение <b>TRUE</b> если хотя бы одна переменная имеют значение <b>TRUE</b>. \r\nЕсли все из переменных будет <b>FALSE</b> , то только тогда значение будет <b>FALSE</b>.\r\n\r\n<color=#ffff00ff><b><size=55>Пример:</size></b></color>\r\n<color=#add8e6ff><b>age = 25\r\nMarried = False\r\nres = age > 21 or Married\r\nprint(res)  # True, так как выражение age > 21</b></color>\r\n\r\n<color=#add8e6ff><b>not(не)</b></color>\r\nВозвращает <b>True</b>, если выражение равно <b>False</b> и, наоборот, возвращает <b>False</b>, если значение <b>True</b>\r\n\r\n<color=#ffff00ff><b><size=55>Пример:</size></b></color>\r\nage = 25\r\nMarried = False\r\nprint(not age > 21) <color=#add8e6ff><b> # False </b></color>\r\nprint(not Married) <color=#add8e6ff><b> # True </b></color>\r\nprint(not 5) <color=#add8e6ff><b> # False </b></color>\r\nprint(not 0) <color=#add8e6ff><b> # True</b></color>\r\n\r\n<color=#ffff00ff><b><size=55>0 эквивалент False, 1 эквивалентна True</size></b></color>",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "Logical operators",
        "description_eng": "<color=#ffff00ff><b><size=55>Python has the following logical operators:</size></b></color>\r\n<color=#add8e6ff><b>and</b></color>(logical multiplication),<color=#add8e6ff><b>or</b></color>(logical addition),<color=#add8e6ff><b>not</b></color>(logical negation).\r\n\r\n<color=#add8e6ff><b>and</b></color>:\r\nThis operator returns the value <b>TRUE</b> only if all variables have the value <b>TRUE</b>.\r\nIf at least one of the variables is <b>FALSE</b>, then the value will be <b>FALSE</b>.\r\n\r\n<color=#ffff00ff><b><size=55>Example:</size></b></color>\r\nage = 23\r\nweight = 50\r\nresult = age > 21 and weight == 50\r\nprint(result) <color=#add8e6ff><b> # True</b></color>\r\n\r\nIn this case, the <color=#add8e6ff><b>and</b></color> operator compares the results of two expressions: <color=#add8e6ff><b>age > 21</b></color> <color=#add8e6ff><b>weight == 50</b></color>. And if both of these expressions return <b>True</b>,\r\nthen the <color=#add8e6ff><b>and</b></color> operator also returns <b>True</b> (formally, the value of the last operand is returned).\r\n\r\n<color=#add8e6ff><b>or</b></color>:\r\nThis operator returns the value <b>TRUE</b> if at least one variable has the value <b>TRUE</b>.\r\nIf all of the variables are <b>FALSE</b>, then only then the value will be <b>FALSE</b>.\r\n\r\n<color=#ffff00ff><b><size=55>Example:</size></b></color>\r\n<color=#add8e6ff><b>age = 25\r\nMarried = False\r\nres = age > 21 or Married\r\nprint(res)  # True, as the expression age > 21</b></color>\r\n\r\n<color=#add8e6ff><b>not</b></color>\r\nReturns <b>True</b> if the expression is <b>False</b> and, conversely, returns <b>False</b> if the value is <b>True</b>\r\n\r\n<color=#ffff00ff><b><size=55>Example:</size></b></color>\r\nage = 25\r\nMarried = False\r\nprint(not age > 21) <color=#add8e6ff><b> # False </b></color>\r\nprint(not Married) <color=#add8e6ff><b> # True </b></color>\r\nprint(not 5) <color=#add8e6ff><b> # False </b></color>\r\nprint(not 0) <color=#add8e6ff><b> # True</b></color>\r\n\r\n<color=#ffff00ff><b><size=55>0 is equivalent to False, 1 is equivalent to True</size></b></color>"
    },
    {
        "id": 6,
        "number": 6,
        "chapter_name": "Основы синтаксиса",
        "name": "Ввод и вывод данных",
        "description": "После работы программы всегда хочется увидеть результат, что же там получилось \r\n<color=#ffff00ff><b><size=55>Вывод</size></b></color> позволяет увидеть, использовать, передать дальше результат работы программы.\r\n\r\n<color=#add8e6ff><b>Функция вывода print()</b></color>\r\nЭта функция выводит на экран то, что у нее <b>в скобках</b>. Можно указывать конкретные переменные, количество их может быть разным\r\n\r\n<color=#ffff00ff><b><size=55>Пример:</size></b></color>\r\n<color=#add8e6ff><b>print(574.4)</b></color> на экране увидим 574.4\r\n<color=#add8e6ff><b>print(\"a=\", 7)</b></color> на экране увидим \"a=\", 7\r\n<color=#add8e6ff><b>print(\"hello\" + \" \" + \"world\")</b></color> На экране увидим : hello world\r\n<color=#add8e6ff><b>print(\"Hello \\n World\")</b></color> На экране слово Hello World написаны будут друг под другом\r\n<color=#add8e6ff><b>print(6+5)</b></color> Выведет 11\r\n\r\n<color=#ffff00ff><b><size=55>Аргументы функции</size></b></color> (то, что в скобках), разделяются между собой запятыми. В выводе вместо запятых значения разделены пробелом. \r\n\r\n<color=#add8e6ff><b>Функция ввода input()</b></color>\r\nКогда вызывается эта функция, программа останавливает свое выполнение и ждет, когда пользователь введет что-то. \r\nПосле нажатия Enter, функция <color=#add8e6ff><b>input()</b></color> заберет введенный текст и передаст его программе.\r\nВведенное значение <b>можно присвоить</b> переменной. \r\n\r\n<color=#ffff00ff><b><size=55>Пример:</size></b></color>\r\na = input()\r\nUser_name = input('Ваше имя: ')<color=#add8e6ff><b> #На экране появится подсказка \"Ваше имя\"</b></color>\r\nsumma = int(input(\"Сколько стоит? \")) <color=#add8e6ff><b>#преобразование введенной строки в целое число</b></color>\r\n\r\nВсе данные , введенные с клавиатуры, считаются <color=#add8e6ff><b>типом данных str</b></color>, даже если вы вводите число. Чтоб в дальнейшем можно было использовать для вычисления,\r\nих <b>преобразовывают</b> в числа.",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "Data input and output",
        "description_eng": "After running the program, you always want to see the result, what happened there\r\n<color=#ffff00ff><b><size=55>Output</size></b></color> allows you to see, use, pass on the result of the program's work.\r\n\r\n<color=#add8e6ff><b>Print() output function</b></color>\r\nThis function displays on the screen what is <b>in brackets</b>. You can specify specific variables, their number can be different\r\n\r\n<color=#ffff00ff><b><size=55>Example:</size></b></color>\r\n<color=#add8e6ff><b>print(574.4)</b></color> we will see 574.4 on the screen\r\n<color=#add8e6ff><b>print(\"a=\", 7)</b></color> we will see \"a=\", 7 on the screen\r\n<color=#add8e6ff><b>print(\"hello\" + \" \" + \"world\")</b></color> We will see on the screen: hello world\r\n<color=#add8e6ff><b>print(\"Hello \\n World\")</b></color> On the screen, the word Hello World will be written one under the other\r\n<color=#add8e6ff><b>print(6+5)</b></color> Will output 11\r\n\r\n<color=#ffff00ff><b><size=55>Function arguments</size></b></color> (what's in brackets) are separated by commas. In the output, instead of commas, values are separated by a space.\r\n\r\n<color=#add8e6ff><b>Input() input function</b></color>\r\nWhen this function is called, the program stops its execution and waits for the user to enter something.\r\nAfter pressing Enter, the <color=#add8e6ff><b>input()</b></color> function will take the entered text and pass it to the program.\r\nThe entered value <b>can be assigned</b> to a variable.\r\n\r\n<color=#ffff00ff><b><size=55>Example:</size></b></color>\r\na = input()\r\nUser_name = input('Your name: ')<color=#add8e6ff><b> #The prompt \"Your name\" will appear on the screen</b></color>\r\nsumma = int(input(\"How much does it cost? \")) <color=#add8e6ff><b>#conversion of the entered string to an integer</b></color>\r\n\r\nAll data entered from the keyboard is considered <color=#add8e6ff><b>data type str</b></color>, even if you enter a number. In order to use it for calculation later,\r\nthey <b>are converted</b> into numbers."
    },
    {
        "id": 7,
        "number": 7,
        "chapter_name": "Основы синтаксиса",
        "name": "Условия",
        "description": "Иногда в зависимости от введенных данных, будет зависеть, что дальше будет выполнять программа. Для этого используются <b><color=#add8e6ff>условные конструкции</color></b>.\r\n\r\n<b><color=#ffff00ff><size=55>Конструкция:</size></color></b>\r\n<b>if Условие:</b>\r\n    <b><color=#add8e6ff>Блок инструкций 1</color></b>\r\n<b>else:</b>\r\n    <b><color=#add8e6ff>Блок инструкций 2</color></b>\r\n\r\n<b><color=#add8e6ff>Блок инструкций 1</color></b> будет выполнен, если <b>Условие</b> истинно. Если <b>Условие</b> ложно, будет выполнен <b><color=#add8e6ff>Блок инструкций 2</color></b>.\r\nВ условной инструкции может отсутствовать слово <b>else</b> и последующий блок.\r\n\r\n<b><color=#ffff00ff><size=55>Пример:</size></color></b>\r\n<b><color=#add8e6ff>y = int(input())\r\nif y < 0:\r\n    y = -x\r\nprint(y)</color></b>\r\n\r\n<b><color=#add8e6ff>Для выделения блока инструкций</color></b>, относящихся к инструкции <b>if</b> или <b>else</b> в языке Питон используются <b>отступы</b>. Все инструкции, которые относятся \r\nк одному блоку, должны иметь равную величину отступа, то есть <b>одинаковое число пробелов</b> в начале строки.\r\n</color></b>Рекомендуется</color></b> использовать отступ в <b>4 пробела</b> и <b><color=#add8e6ff>не рекомендуется</color></b> использовать в качестве отступа <b>символ табуляции</b>.\r\n\r\nИногда условий больше, чем одно <b>условие</b>, которое должно проверяться за один раз, для этого используются <b><color=#add8e6ff>вложенные конструкции</color></b>.\r\nПолучаем <b>вложенное ветвление</b> – после одной развилки в ходе исполнения программы появляется другая развилка. \r\n\r\n<b><color=#ffff00ff><size=55>Пример:</size></color></b>\r\nx = int(input())\r\ny = int(input())\r\nif x > 0:\r\n    if y > 0:               <color=#add8e6ff><b># x > 0, y > 0</b></color>\r\n        print(\"+ и +\")\r\n    else:                   <color=#add8e6ff><b># x > 0, y < 0</b></color>\r\n        print(\"+ -\")\r\nelse:\r\n    if y > 0:               <color=#add8e6ff><b># x < 0, y > 0</b></color>\r\n        print(\"- +\")\r\n    else:                   <color=#add8e6ff><b># x < 0, y < 0</b></color>\r\n        print(\"- -\")",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "Conditions",
        "description_eng": "Sometimes, depending on the input data, what the program will do next will depend. For this, <b><color=#add8e6ff>conditional constructs</color></b> are used.\r\n\r\n<b><color=#ffff00ff><size=55>Construction:</size></color></b>\r\n<b>if Condition:</b>\r\n    <b><color=#add8e6ff>Instruction Block 1</color></b>\r\n<b>else:</b>\r\n    <b><color=#add8e6ff>Instruction Block 2</color></b>\r\n\r\n<b><color=#add8e6ff>Instruction Block 1</color></b> will be executed if the <b>Condition</b> is true. If the <b>Condition</b> is false, <b><color=#add8e6ff>Instruction Block 2</color></b> will be executed.\r\nThe word <b>else</b> and the subsequent block may be missing in the conditional instruction.\r\n\r\n<b><color=#ffff00ff><size=55>Example:</size></color></b>\r\n<b><color=#add8e6ff>y = int(input())\r\nif y < 0:\r\n    y = -x\r\nprint(y)</color></b>\r\n\r\n<b><color=#add8e6ff>To highlight the instruction block</color></b> related to the <b>if</b> or <b>else</b> instruction in Python, <b>indents</b> are used. All instructions that belong\r\nto one block must have the same indent, that is, <b>the same number of spaces</b> at the beginning of the line.\r\nIt is <b>recommended</b> to use an indent of <b>4 spaces</b> and it is <b><color=#add8e6ff>not recommended</color></b> to use the <b>tab character</b> as an indent.\r\n\r\nSometimes there are more than one <b>condition</b> that needs to be checked at a time, for this <b><color=#add8e6ff>nested constructs</color></b> are used.\r\nWe get <b>nested branching</b> - after one fork in the course of program execution, another fork appears.\r\n\r\n<b><color=#ffff00ff><size=55>Example:</size></color></b>\r\nx = int(input())\r\ny = int(input())\r\nif x > 0:\r\n    if y > 0:               <color=#add8e6ff><b># x > 0, y > 0</b></color>\r\n        print(\"+ and +\")\r\n    else:                   <color=#add8e6ff><b># x > 0, y < 0</b></color>\r\n        print(\"+ -\")\r\nelse:\r\n    if y > 0:               <color=#add8e6ff><b># x < 0, y > 0</b></color>\r\n        print(\"- +\")\r\n    else:                   <color=#add8e6ff><b># x < 0, y < 0</b></color>\r\n        print(\"- -\")"
    },
    {
        "id": 8,
        "number": 8,
        "chapter_name": "Основы синтаксиса",
        "name": "Цикл while",
        "description": "<b><color=#ffff00ff><size=55>Циклы</size></color></b> позволяют выполнять некоторое действие в зависимости от соблюдения некоторого <b>условия</b>. В языке Python есть следующие <b><color=#add8e6ff>типы циклов:</color></b>\r\n<b><color=#ffff00ff><size=55>while, for</size></color></b>\r\n\r\nПосле ключевого слова <b>while</b> указывается условие, и пока это выражение возвращает значение <b>True</b>, будет выполняться блок инструкций, который идет далее.\r\n\r\n<b><color=#ffff00ff><size=55>Конструкция:</size></color></b>\r\n<b>while условное_выражение:\r\n   инструкции</b>\r\n\r\n<b><color=#ffff00ff><size=55>Пример:</size></color></b>\r\n<color=#add8e6ff><b>num = 0\r\nwhile num < 3:\r\n    print(\"num = {num}\")\r\n    num += 1\r\nprint(\"программа завершена\")</b></color>\r\n\r\nВ данном случае цикл <b>while</b> будет выполняться, пока переменная <b>num</b> меньше 3 и выполнится <b>3 раза</b>. \r\n<color=#add8e6ff><b>Необходимо помнить</b></color> о 4 отступах слева у вычислений внутри цикла.",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "While loop",
        "description_eng": "<b><color=#ffff00ff><size=55>Loops</size></color></b> allow you to perform a certain action depending on the compliance with a certain <b>condition</b>. In the Python language, there are the following <b><color=#add8e6ff>types of loops:</color></b>\r\n<b><color=#ffff00ff><size=55>while, for</size></color></b>\r\n\r\nAfter the keyword <b>while</b>, a condition is specified, and as long as this expression returns the value <b>True</b>, the block of instructions that follows will be executed.\r\n\r\n<b><color=#ffff00ff><size=55>Construction:</size></color></b>\r\n<b>while conditional_expression:\r\n   instructions</b>\r\n\r\n<b><color=#ffff00ff><size=55>Example:</size></color></b>\r\n<color=#add8e6ff><b>num = 0\r\nwhile num < 3:\r\n    print(\"num = {num}\")\r\n    num += 1\r\nprint(\"program completed\")</b></color>\r\n\r\nIn this case, the <b>while</b> loop will be executed as long as the variable <b>num</b> is less than 3 and will be executed <b>3 times</b>.\r\n<color=#add8e6ff><b>It is necessary to remember</b></color> about 4 indents to the left of the calculations inside the loop."
    },
    {
        "id": 9,
        "number": 9,
        "chapter_name": "Основы синтаксиса",
        "name": "Цикл for",
        "description": "<b><color=#ffff00ff><size=55>Другой тип циклов</size></color></b> представляет конструкция <b><color=#add8e6ff>for</color></b>. Этот цикл <b>пробегается</b> по набору значений, <b>помещает</b> каждое значение в переменную, и затем в цикле мы <b>можем</b> с этой переменной <b>производить различные действия</b>.\r\n\r\n<b><color=#ffff00ff><size=55>Конструкция:</size></color></b>\r\n<b><color=#add8e6ff>for переменная in набор_значений:\r\n    инструкции</color></b>\r\n\r\nПосле ключевого слова <b><color=#add8e6ff>for</color></b> идет <b>название переменной</b>, в которую будут помещаться значения. Затем после оператора <b><color=#add8e6ff>in</color></b> указывается <b>набор значений</b> и <b>двоеточие</b>.\r\n\r\nА со <b>следующей строки</b> располагается <b><color=#add8e6ff>блок инструкций</color></b> цикла, которые также должны иметь <b>отступы</b> от начала цикла. При выполнении цикла Python <b>последовательно получает</b> все значения из набора и <b>передает</b> их переменную. \r\n\r\nКогда все значения из набора <b>будут перебраны</b>, цикл <b>завершает</b> свою работу.\r\nВ качестве <b><color=#add8e6ff>набора значений</color></b>, например, можно рассматривать <b>строку</b>, которая по сути представляет набор символов.\r\n\r\n<b><color=#ffff00ff><size=55>Пример:</size></color></b>\r\n<b><color=#add8e6ff>mes = \"Hello\"\r\n \r\nfor c in mes:\r\n    print(c)</color></b>\r\n\r\n<b><color=#ffff00ff><size=55>Результат:</size></color></b>\r\n<b><color=#add8e6ff>H\r\ne\r\nl\r\nl\r\no</color></b>",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "For loop",
        "description_eng": "<b><color=#ffff00ff><size=55>Another type of loops</size></color></b> is represented by the <b><color=#add8e6ff>for</color></b> construct. This loop <b>runs</b> through a set of values, <b>places</b> each value in a variable, and then in the loop we <b>can</b> <b>perform various actions</b> with this variable.\r\n\r\n<b><color=#ffff00ff><size=55>Construction:</size></color></b>\r\n<b><color=#add8e6ff>for variable in set_of_values:\r\n    instructions</color></b>\r\n\r\nAfter the keyword <b><color=#add8e6ff>for</color></b> comes the <b>name of the variable</b> into which the values will be placed. Then after the operator <b><color=#add8e6ff>in</color></b> a <b>set of values</b> and a <b>colon</b> are specified.\r\n\r\nAnd from the <b>next line</b> is located the <b><color=#add8e6ff>block of instructions</color></b> of the loop, which should also have <b>indents</b> from the beginning of the loop. When executing the loop, Python <b>sequentially gets</b> all the values from the set and <b>passes</b> them to the variable.\r\n\r\nWhen all the values from the set <b>have been iterated</b>, the loop <b>completes</b> its work.\r\nAs a <b><color=#add8e6ff>set of values</color></b>, for example, you can consider a <b>string</b>, which essentially represents a set of characters.\r\n\r\n<b><color=#ffff00ff><size=55>Example:</size></color></b>\r\n<b><color=#add8e6ff>mes = \"Hello\"\r\n \r\nfor c in mes:\r\n    print(c)</color></b>\r\n\r\n<b><color=#ffff00ff><size=55>Result:</size></color></b>\r\n<b><color=#add8e6ff>H\r\ne\r\nl\r\nl\r\no</color></b>"
    },
    {
        "id": 10,
        "number": 10,
        "chapter_name": "Основы синтаксиса",
        "name": "Вложенные циклы",
        "description": "<b><color=#ffff00ff><size=55>Одни циклы</size></color></b> внутри себя <b>могут содержать</b> другие циклы.\r\n\r\n<b><color=#ffff00ff><size=55>Пример:</size></color></b>\r\n<b><color=#add8e6ff>i = 1\r\nj = 1\r\nwhile i < 10:\r\n    while j < 10:\r\n        print(i * j, end=\"\\t\")\r\n        j += 1\r\n    print(\"\\n\")\r\n    j = 1\r\n    i += 1</color></b>\r\n\r\nВнешний цикл <b><color=#add8e6ff>while i < 10:</color></b> срабатывает <b>9 раз</b> пока переменная i не станет <b>равна 10</b>. Внутри этого цикла срабатывает внутренний цикл <b><color=#add8e6ff>while j < 10:</color></b>. \r\nВнутренний цикл также <b>срабатывает 9 раз</b> пока переменная j не станет равна 10. Причем все 9 итераций внутреннего цикла <b>срабатывают в рамках</b> одной итерации внешнего цикла.\r\n\r\nВ <b><color=#add8e6ff>каждой итерации</color></b> внутреннего цикла на консоль <b>будет выводится</b> произведение чисел i и j. Затем значение переменной j <b>увеличивается</b> на единицу. Когда внутренний цикл <b>закончил</b> работу, \r\nзначений переменной j <b>брасывается</b> в 1, а значение переменной i <b>увеличивается</b> на единицу и происходит переход к <b><color=#add8e6ff>следующей итерации</color></b> внешнего цикла. И все повторяется, пока переменная i <b>не станет равна 10</b>. \r\n\r\nСоответственно внутренний цикл сработает <b>всего 81 раз</b> для всех итераций внешнего цикла. В итоге мы получим следующий консольный <b>вывод</b>:\r\n\r\n<b><color=#ffff00ff><size=55>Выход из цикла break и continue</size></color></b>\r\nДля управления циклом мы можем использовать специальные операторы <b><color=#add8e6ff>break</color></b> и <b><color=#add8e6ff>continue</color></b>. Оператор <b><color=#add8e6ff>break</color></b> осуществляет <b>выход из цикла</b>. А оператор <b><color=#add8e6ff>continue</color></b> выполняет <b>переход</b> к следующей итерации цикла.\r\n\r\nОператор <b><color=#add8e6ff>break</color></b> может использоваться, если в цикле образуются условия, которые <b>несовместимы</b> с его дальнейшим выполнением.\r\n\r\n<b><color=#ffff00ff><size=55>Пример:</size></color></b>\r\nnumber = 0\r\nwhile number < 5:\r\n    number += 1\r\n    if number == 3 :    <b><color=#add8e6ff># если number = 3, выходим из цикла</color></b>\r\n        break\r\n    print(f\"number = {number}\")\r\n\r\nЗдесь цикл <b><color=#add8e6ff>while</color></b> проверяет условие <b><color=#add8e6ff>number < 5</color></b>. И пока <b><color=#add8e6ff>number</color></b> не равно 5, предполагается, что значение <b><color=#add8e6ff>number</color></b> будет выводиться на консоль. Однако внутри цикла также проверяется другое условие: <b><color=#add8e6ff>if number == 3</color></b>. \r\nТо есть, если значение <b><color=#add8e6ff>number</color></b> равно 3, то с помощью оператора <b><color=#add8e6ff>break</color></b> выходим из цикла. И в итоге мы получим следующий консольный <b>вывод</b>:\r\n\r\n<b><color=#ffff00ff><size=55>Результат:</size></color></b>\r\n<b><color=#add8e6ff>number = 1\r\nnumber = 2</color></b>",
        "chapter_name_eng": "Default Chapter Name",
        "name_eng": "Nested loops",
        "description_eng": "<b><color=#ffff00ff><size=55>Some loops</size></color></b> can contain other loops within themselves.\r\n\r\n<b><color=#ffff00ff><size=55>Example:</size></color></b>\r\n<b><color=#add8e6ff>i = 1\r\nj = 1\r\nwhile i < 10:\r\n    while j < 10:\r\n        print(i * j, end=\"\\t\")\r\n        j += 1\r\n    print(\"\\n\")\r\n    j = 1\r\n    i += 1</color></b>\r\n\r\nThe outer loop <b><color=#add8e6ff>while i < 10:</color></b> triggers <b>9 times</b> until the variable i becomes <b>equal to 10</b>. Inside this loop, the inner loop <b><color=#add8e6ff>while j < 10:</color></b> triggers.\r\nThe inner loop also <b>triggers 9 times</b> until the variable j becomes equal to 10. Moreover, all 9 iterations of the inner loop <b>occur within</b> one iteration of the outer loop.\r\n\r\nIn <b><color=#add8e6ff>each iteration</color></b> of the inner loop, the product of the numbers i and j <b>will be output</b> to the console. Then the value of the variable j <b>increases</b> by one. When the inner loop <b>has finished</b> its work,\r\nthe value of the variable j <b>is reset</b> to 1, the value of the variable i <b>increases</b> by one and the transition to the <b><color=#add8e6ff>next iteration</color></b> of the outer loop occurs. And everything repeats until the variable i <b>becomes equal to 10</b>.\r\n\r\nAccordingly, the inner loop will trigger <b>a total of 81 times</b> for all iterations of the outer loop. In the end, we will get the following console <b>output</b>:\r\n\r\n<b><color=#ffff00ff><size=55>Exiting the loop with break and continue</size></color></b>\r\nTo control the loop, we can use special operators <b><color=#add8e6ff>break</color></b> and <b><color=#add8e6ff>continue</color></b>. The operator <b><color=#add8e6ff>break</color></b> performs <b>exit from the loop</b>. And the operator <b><color=#add8e6ff>continue</color></b> performs <b>transition</b> to the next iteration of the loop.\r\n\r\nThe operator <b><color=#add8e6ff>break</color></b> can be used if conditions are formed in the loop that are <b>incompatible</b> with its further execution.\r\n\r\n<b><color=#ffff00ff><size=55>Example:</size></color></b>\r\nnumber = 0\r\nwhile number < 5:\r\n    number += 1\r\n    if number == 3 :    <b><color=#add8e6ff># if number = 3, we exit the loop</color></b>\r\n        break\r\n    print(f\"number = {number}\")\r\n\r\nHere the loop <b><color=#add8e6ff>while</color></b> checks the condition <b><color=#add8e6ff>number < 5</color></b>. And as long as <b><color=#add8e6ff>number</color></b> is not equal to 5, it is assumed that the value of <b><color=#add8e6ff>number</color></b> will be output to the console. However, another condition is also checked inside the loop: <b><color=#add8e6ff>if number == 3</color></b>. \r\nThat is, if the value of <b><color=#add8e6ff>number</color></b> is equal to 3, then we exit the loop using the operator <b><color=#add8e6ff>break</color></b>. And in the end, we will get the following console <b>output</b>:\r\n\r\n<b><color=#ffff00ff><size=55>Result:</size></color></b>\r\n<b><color=#add8e6ff>number = 1\r\nnumber = 2</color></b>"
    }
]