<b><color=#ffff00ff><size=55>Одни циклы</size></color></b> внутри себя <b>могут содержать</b> другие циклы.

<b><color=#ffff00ff><size=55>Пример:</size></color></b>
<b><color=#add8e6ff>i = 1
j = 1
while i < 10:
    while j < 10:
        print(i * j, end="\t")
        j += 1
    print("\n")
    j = 1
    i += 1</color></b>

Внешний цикл <b><color=#add8e6ff>while i < 10:</color></b> срабатывает <b>9 раз</b> пока переменная i не станет <b>равна 10</b>. Внутри этого цикла срабатывает внутренний цикл <b><color=#add8e6ff>while j < 10:</color></b>. 
Внутренний цикл также <b>срабатывает 9 раз</b> пока переменная j не станет равна 10. Причем все 9 итераций внутреннего цикла <b>срабатывают в рамках</b> одной итерации внешнего цикла.

В <b><color=#add8e6ff>каждой итерации</color></b> внутреннего цикла на консоль <b>будет выводится</b> произведение чисел i и j. Затем значение переменной j <b>увеличивается</b> на единицу. Когда внутренний цикл <b>закончил</b> работу, 
значений переменной j <b>брасывается</b> в 1, а значение переменной i <b>увеличивается</b> на единицу и происходит переход к <b><color=#add8e6ff>следующей итерации</color></b> внешнего цикла. И все повторяется, пока переменная i <b>не станет равна 10</b>. 

Соответственно внутренний цикл сработает <b>всего 81 раз</b> для всех итераций внешнего цикла. В итоге мы получим следующий консольный <b>вывод</b>:

<b><color=#ffff00ff><size=55>Выход из цикла break и continue</size></color></b>
Для управления циклом мы можем использовать специальные операторы <b><color=#add8e6ff>break</color></b> и <b><color=#add8e6ff>continue</color></b>. Оператор <b><color=#add8e6ff>break</color></b> осуществляет <b>выход из цикла</b>. А оператор <b><color=#add8e6ff>continue</color></b> выполняет <b>переход</b> к следующей итерации цикла.

Оператор <b><color=#add8e6ff>break</color></b> может использоваться, если в цикле образуются условия, которые <b>несовместимы</b> с его дальнейшим выполнением.

<b><color=#ffff00ff><size=55>Пример:</size></color></b>
number = 0
while number < 5:
    number += 1
    if number == 3 :    <b><color=#add8e6ff># если number = 3, выходим из цикла</color></b>
        break
    print(f"number = {number}")

Здесь цикл <b><color=#add8e6ff>while</color></b> проверяет условие <b><color=#add8e6ff>number < 5</color></b>. И пока <b><color=#add8e6ff>number</color></b> не равно 5, предполагается, что значение <b><color=#add8e6ff>number</color></b> будет выводиться на консоль. Однако внутри цикла также проверяется другое условие: <b><color=#add8e6ff>if number == 3</color></b>. 
То есть, если значение <b><color=#add8e6ff>number</color></b> равно 3, то с помощью оператора <b><color=#add8e6ff>break</color></b> выходим из цикла. И в итоге мы получим следующий консольный <b>вывод</b>:

<b><color=#ffff00ff><size=55>Результат:</size></color></b>
<b><color=#add8e6ff>number = 1
number = 2</color></b>